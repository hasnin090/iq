// ูุญุต ุงุชุตุงู Supabase ูุจุณุท
const SUPABASE_URL = process.env.SUPABASE_URL || 'https://yieyqusnciiithjtlgod.supabase.co';
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlpZXlxdXNuY2lpaXRoanRsZ29kIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzUzMjA2MDQsImV4cCI6MjA1MDg5NjYwNH0.LUhEbdl2r0yRlQrHWzpJhvYLXhqLTfPc9W_3yVPc23s';

console.log('๐ ูุญุต ุงุชุตุงู Supabase...\n');

// 1. ูุญุต ูุชุบูุฑุงุช ุงูุจูุฆุฉ
console.log('1๏ธโฃ ูุญุต ูุชุบูุฑุงุช ุงูุจูุฆุฉ:');
console.log(`   SUPABASE_URL: ${SUPABASE_URL}`);
console.log(`   SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY ? SUPABASE_ANON_KEY.substring(0, 20) + '...' : 'ุบูุฑ ููุฌูุฏ'}`);

// 2. ูุญุต REST API
console.log('\n2๏ธโฃ ูุญุต REST API:');

async function checkSupabaseAPI() {
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });
    
    console.log(`   ุญุงูุฉ ุงูุงุณุชุฌุงุจุฉ: ${response.status}`);
    console.log(`   ูุต ุงูุญุงูุฉ: ${response.statusText}`);
    
    if (response.ok) {
      console.log('   โ REST API ูุนูู ุจูุฌุงุญ');
      return true;
    } else {
      console.log('   โ REST API ูุง ูุนูู');
      return false;
    }
  } catch (error) {
    console.log(`   โ ุฎุทุฃ ูู ุงูุงุชุตุงู: ${error.message}`);
    return false;
  }
}

// 3. ูุญุต ุฌุฏูู ุงููุณุชุฎุฏููู
async function checkUsersTable() {
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/users?select=count`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`   ุญุงูุฉ ุงูุงุณุชุฌุงุจุฉ: ${response.status}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log('   โ ุฌุฏูู ุงููุณุชุฎุฏููู ูุชุงุญ');
      console.log(`   ุนุฏุฏ ุงููุณุชุฎุฏููู: ${Array.isArray(data) ? data.length : 'ุบูุฑ ูุญุฏุฏ'}`);
      return true;
    } else {
      const errorText = await response.text();
      console.log(`   โ ุฎุทุฃ ูู ุงููุตูู ูุฌุฏูู ุงููุณุชุฎุฏููู: ${errorText}`);
      return false;
    }
  } catch (error) {
    console.log(`   โ ุฎุทุฃ ูู ูุญุต ุฌุฏูู ุงููุณุชุฎุฏููู: ${error.message}`);
    return false;
  }
}

// 4. ูุญุต Storage
async function checkStorage() {
  try {
    const response = await fetch(`${SUPABASE_URL}/storage/v1/bucket`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });
    
    console.log(`   ุญุงูุฉ ุงูุงุณุชุฌุงุจุฉ: ${response.status}`);
    
    if (response.ok) {
      const buckets = await response.json();
      console.log('   โ Storage ูุชุงุญ');
      console.log(`   ุนุฏุฏ ุงูู buckets: ${Array.isArray(buckets) ? buckets.length : 'ุบูุฑ ูุญุฏุฏ'}`);
      if (Array.isArray(buckets) && buckets.length > 0) {
        console.log(`   ุงูู buckets: ${buckets.map(b => b.name).join(', ')}`);
      }
      return true;
    } else {
      const errorText = await response.text();
      console.log(`   โ ุฎุทุฃ ูู ุงููุตูู ููู Storage: ${errorText}`);
      return false;
    }
  } catch (error) {
    console.log(`   โ ุฎุทุฃ ูู ูุญุต Storage: ${error.message}`);
    return false;
  }
}

// ุชุดุบูู ุฌููุน ุงููุญูุตุงุช
async function runAllChecks() {
  console.log('\n' + '='.repeat(50));
  
  const apiCheck = await checkSupabaseAPI();
  
  console.log('\n3๏ธโฃ ูุญุต ุฌุฏูู ุงููุณุชุฎุฏููู:');
  const usersCheck = await checkUsersTable();
  
  console.log('\n4๏ธโฃ ูุญุต Storage:');
  const storageCheck = await checkStorage();
  
  console.log('\n' + '='.repeat(50));
  console.log('๐ ููุฎุต ุงููุชุงุฆุฌ:');
  console.log(`โ REST API: ${apiCheck ? 'ูุนูู' : 'ูุง ูุนูู'}`);
  console.log(`โ ุฌุฏูู ุงููุณุชุฎุฏููู: ${usersCheck ? 'ูุนูู' : 'ูุง ูุนูู'}`);
  console.log(`โ Storage: ${storageCheck ? 'ูุนูู' : 'ูุง ูุนูู'}`);
  
  const allGood = apiCheck && usersCheck && storageCheck;
  console.log(`\n๐ฏ ุงูุญุงูุฉ ุงูุนุงูุฉ: ${allGood ? 'โ ูู ุดูุก ูุนูู ุจุดูู ุตุญูุญ' : 'โ ููุงู ูุดุงูู ุชุญุชุงุฌ ุฅุตูุงุญ'}`);
  
  if (!allGood) {
    console.log('\n๐ง ุงููุดุงูู ุงููุญุชููุฉ:');
    if (!apiCheck) console.log('   - ุชุญูู ูู SUPABASE_URL ู SUPABASE_ANON_KEY');
    if (!usersCheck) console.log('   - ุชุญูู ูู ุฃุฐููุงุช ุฌุฏูู ุงููุณุชุฎุฏููู');
    if (!storageCheck) console.log('   - ุชุญูู ูู ุฅุนุฏุงุฏุงุช Storage');
  }
  
  console.log('\nโจ ุงูุชูู ุงููุญุต');
}

// ุชุดุบูู ุงููุญุต
runAllChecks().catch(error => {
  console.error('๐ฅ ุฎุทุฃ ูู ุชุดุบูู ุงููุญุต:', error);
});
