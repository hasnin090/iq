-- ===================================================================
-- نظام المحاسبة العربي - مخطط قاعدة البيانات الشامل
-- Arabic Accounting System - Complete Database Schema  
-- تحديث: يوليو 2025 - إصدار محسن ومكتمل
-- ===================================================================

-- ===================================================================
-- 1. جدول الملفات الشخصية للمستخدمين (Profiles)
-- ===================================================================
CREATE TABLE IF NOT EXISTS profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT NOT NULL,
  role TEXT CHECK (role IN ('admin', 'manager', 'user', 'viewer', 'accountant')) DEFAULT 'user',
  permissions TEXT[] DEFAULT '{}',
  phone VARCHAR(20),
  avatar_url TEXT,
  last_login TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 2. جدول المشاريع (Projects)
-- ===================================================================
CREATE TABLE IF NOT EXISTS projects (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(200) NOT NULL,
  description TEXT,
  budget DECIMAL(15,2) DEFAULT 0 CHECK (budget >= 0),
  spent DECIMAL(15,2) DEFAULT 0 CHECK (spent >= 0),
  start_date DATE,
  end_date DATE,
  status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'completed', 'paused', 'cancelled')),
  priority VARCHAR(20) DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high', 'urgent')),
  progress INTEGER DEFAULT 0 CHECK (progress >= 0 AND progress <= 100),
  client_name VARCHAR(255),
  client_email VARCHAR(255),
  client_phone VARCHAR(20),
  created_by UUID REFERENCES auth.users(id),
  assigned_users UUID[],
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  CONSTRAINT check_project_dates CHECK (end_date IS NULL OR start_date IS NULL OR end_date >= start_date)
);

-- ===================================================================
-- 3. جدول أدوار المستخدمين في المشاريع (User Roles)
-- ===================================================================
CREATE TABLE IF NOT EXISTS user_roles (
  id SERIAL PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id),
  project_id UUID REFERENCES projects(id),
  role TEXT CHECK (role IN ('owner', 'manager', 'viewer', 'contributor')),
  assigned_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE(user_id, project_id)
);

-- ===================================================================
-- 4. جدول أنواع المصاريف (Expense Types)
-- ===================================================================
CREATE TABLE IF NOT EXISTS expense_types (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT,
  active BOOLEAN DEFAULT true,
  color VARCHAR(7) DEFAULT '#6366F1',
  icon VARCHAR(50),
  parent_id INTEGER REFERENCES expense_types(id),
  sort_order INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 5. جدول الموظفين (Employees)
-- ===================================================================
CREATE TABLE IF NOT EXISTS employees (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  employee_code VARCHAR(50) UNIQUE,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(255),
  phone VARCHAR(20),
  position VARCHAR(255),
  department VARCHAR(255),
  salary DECIMAL(15,2) DEFAULT 0 CHECK (salary >= 0),
  assigned_project_id UUID REFERENCES projects(id),
  active BOOLEAN DEFAULT true,
  hire_date DATE DEFAULT CURRENT_DATE,
  birth_date DATE,
  address TEXT,
  emergency_contact VARCHAR(255),
  emergency_phone VARCHAR(20),
  bank_account VARCHAR(50),
  national_id VARCHAR(50),
  notes TEXT,
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 6. جدول ربط الموظفين بالمشاريع (Employee Projects)
-- ===================================================================
CREATE TABLE IF NOT EXISTS employee_projects (
  id SERIAL PRIMARY KEY,
  employee_id UUID REFERENCES employees(id) ON DELETE CASCADE,
  project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
  role VARCHAR(255),
  hourly_rate DECIMAL(10,2),
  start_date DATE,
  end_date DATE,
  active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE(employee_id, project_id)
);

-- ===================================================================
-- 7. جدول المعاملات المالية (Transactions)
-- ===================================================================
CREATE TABLE IF NOT EXISTS transactions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  type VARCHAR(20) NOT NULL CHECK (type IN ('income', 'expense')),
  amount DECIMAL(15,2) NOT NULL CHECK (amount > 0),
  description TEXT NOT NULL,
  date DATE NOT NULL DEFAULT CURRENT_DATE,
  project_id UUID REFERENCES projects(id),
  expense_type_id INTEGER REFERENCES expense_types(id),
  employee_id UUID REFERENCES employees(id),
  
  -- File attachments
  file_url TEXT,
  file_name VARCHAR(255),
  file_type VARCHAR(50),
  file_size INTEGER,
  
  -- Payment details
  reference_number VARCHAR(100),
  payment_method VARCHAR(50) CHECK (payment_method IN ('cash', 'bank_transfer', 'credit_card', 'check', 'online')),
  bank_account VARCHAR(100),
  check_number VARCHAR(50),
  
  -- Status and workflow
  status VARCHAR(20) DEFAULT 'completed' CHECK (status IN ('pending', 'completed', 'cancelled')),
  approved_by UUID REFERENCES auth.users(id),
  approved_at TIMESTAMPTZ,
  
  -- Categorization
  tags TEXT[],
  is_recurring BOOLEAN DEFAULT false,
  recurring_frequency VARCHAR(20) CHECK (recurring_frequency IN ('monthly', 'quarterly', 'yearly')),
  
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 8. جدول المدفوعات المؤجلة (Deferred Payments / Receivables)
-- ===================================================================
CREATE TABLE IF NOT EXISTS receivables (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title VARCHAR(255) NOT NULL,
  beneficiary_name VARCHAR(100) NOT NULL,
  amount DECIMAL(15,2) NOT NULL CHECK (amount > 0),
  description TEXT,
  due_date DATE NOT NULL,
  status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'partially_paid', 'paid', 'overdue', 'cancelled')),
  priority VARCHAR(20) DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high', 'urgent')),
  
  -- Related entities
  project_id UUID REFERENCES projects(id),
  client_email VARCHAR(255),
  client_phone VARCHAR(20),
  
  -- Payment tracking
  total_paid DECIMAL(15,2) DEFAULT 0 CHECK (total_paid >= 0),
  paid_date DATE,
  payment_method VARCHAR(50),
  transaction_id UUID REFERENCES transactions(id),
  
  -- Reminders
  reminder_days INTEGER DEFAULT 7,
  last_reminder_sent TIMESTAMPTZ,
  
  created_by UUID REFERENCES auth.users(id),
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 9. جدول مدفوعات المقبوضات (Receivable Payments)
-- ===================================================================
CREATE TABLE IF NOT EXISTS receivable_payments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  receivable_id UUID REFERENCES receivables(id) ON DELETE CASCADE,
  amount DECIMAL(15,2) NOT NULL CHECK (amount > 0),
  payment_date DATE NOT NULL DEFAULT CURRENT_DATE,
  payment_method VARCHAR(50) DEFAULT 'cash',
  reference_number VARCHAR(100),
  notes TEXT,
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 10. جدول الأعمال المكتملة (Completed Works)
-- ===================================================================
CREATE TABLE IF NOT EXISTS completed_works (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title VARCHAR(255) NOT NULL,
  description TEXT,
  project_id UUID REFERENCES projects(id),
  completed_date TIMESTAMPTZ DEFAULT now(),
  completed_by UUID REFERENCES auth.users(id),
  
  -- Work details
  deliverables TEXT[],
  hours_spent DECIMAL(8,2),
  estimated_hours DECIMAL(8,2),
  quality_rating INTEGER CHECK (quality_rating >= 1 AND quality_rating <= 5),
  
  -- Client feedback
  client_approval BOOLEAN DEFAULT false,
  client_feedback TEXT,
  client_rating INTEGER CHECK (client_rating >= 1 AND client_rating <= 5),
  
  -- Status and workflow
  status VARCHAR(20) DEFAULT 'completed' CHECK (status IN ('completed', 'reviewed', 'approved', 'rejected')),
  reviewed_by UUID REFERENCES auth.users(id),
  reviewed_at TIMESTAMPTZ,
  
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 11. جدول مستندات الأعمال المكتملة (Completed Work Documents)
-- ===================================================================
CREATE TABLE IF NOT EXISTS completed_work_documents (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  work_id UUID REFERENCES completed_works(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  file_url TEXT NOT NULL,
  file_name VARCHAR(255),
  file_type VARCHAR(100),
  file_size INTEGER,
  uploaded_by UUID REFERENCES auth.users(id),
  uploaded_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 12. جدول الوثائق (Documents)
-- ===================================================================
CREATE TABLE IF NOT EXISTS documents (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title VARCHAR(200) NOT NULL,
  description TEXT,
  file_url TEXT,
  file_name VARCHAR(255),
  file_type VARCHAR(50),
  file_size INTEGER,
  
  -- Organization
  category VARCHAR(100),
  tags TEXT[] DEFAULT '{}',
  project_id UUID REFERENCES projects(id),
  is_manager_document BOOLEAN DEFAULT false,
  
  -- Access control
  visibility VARCHAR(20) DEFAULT 'private' CHECK (visibility IN ('public', 'private', 'restricted')),
  allowed_users UUID[],
  
  -- Versioning
  version INTEGER DEFAULT 1,
  is_latest_version BOOLEAN DEFAULT true,
  parent_document_id UUID REFERENCES documents(id),
  
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 13. جدول ربط الوثائق بالمعاملات (Document Links)
-- ===================================================================
CREATE TABLE IF NOT EXISTS document_links (
  id SERIAL PRIMARY KEY,
  document_id UUID REFERENCES documents(id) ON DELETE CASCADE,
  entity_type TEXT NOT NULL,
  entity_uuid UUID,
  entity_int INTEGER,
  link_type VARCHAR(50) DEFAULT 'attachment' CHECK (link_type IN ('attachment', 'reference', 'related')),
  linked_by UUID REFERENCES auth.users(id),
  linked_at TIMESTAMPTZ DEFAULT now(),
  CHECK ((entity_uuid IS NOT NULL AND entity_int IS NULL) OR (entity_uuid IS NULL AND entity_int IS NOT NULL))
);

-- ===================================================================
-- 14. جدول سجل الأنشطة (Activity Logs)
-- ===================================================================
CREATE TABLE IF NOT EXISTS activity_logs (
  id SERIAL PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id),
  action VARCHAR(100) NOT NULL,
  entity_type TEXT,
  entity_id UUID,
  description TEXT,
  details JSONB,
  ip_address INET,
  user_agent TEXT,
  metadata JSONB,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 15. جدول القيود المحاسبية (Ledger Entries)
-- ===================================================================
CREATE TABLE IF NOT EXISTS ledger_entries (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  account_name VARCHAR(100) NOT NULL,
  account_type VARCHAR(50) CHECK (account_type IN ('asset', 'liability', 'equity', 'income', 'expense')),
  debit_amount DECIMAL(15,2) DEFAULT 0 CHECK (debit_amount >= 0),
  credit_amount DECIMAL(15,2) DEFAULT 0 CHECK (credit_amount >= 0),
  description TEXT,
  transaction_id UUID REFERENCES transactions(id),
  expense_type_id INTEGER REFERENCES expense_types(id),
  entry_date DATE NOT NULL DEFAULT CURRENT_DATE,
  reference_number VARCHAR(100),
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ DEFAULT now(),
  CHECK ((debit_amount > 0 AND credit_amount = 0) OR (debit_amount = 0 AND credit_amount > 0))
);

-- ===================================================================
-- 16. جدول الإعدادات (Settings)
-- ===================================================================
CREATE TABLE IF NOT EXISTS settings (
  id SERIAL PRIMARY KEY,
  key VARCHAR(100) UNIQUE NOT NULL,
  value TEXT,
  description TEXT,
  category VARCHAR(100) DEFAULT 'general',
  type VARCHAR(20) DEFAULT 'string' CHECK (type IN ('string', 'number', 'boolean', 'json')),
  is_public BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 17. جدول الإشعارات (Notifications)
-- ===================================================================
CREATE TABLE IF NOT EXISTS notifications (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  message TEXT,
  type VARCHAR(50) DEFAULT 'info' CHECK (type IN ('info', 'warning', 'error', 'success')),
  
  -- Related entity
  entity_type VARCHAR(50),
  entity_id UUID,
  
  -- Status
  is_read BOOLEAN DEFAULT false,
  read_at TIMESTAMPTZ,
  
  -- Delivery
  delivery_method VARCHAR(20) DEFAULT 'in_app' CHECK (delivery_method IN ('in_app', 'email', 'sms')),
  sent_at TIMESTAMPTZ,
  
  created_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 18. جدول تتبع الميزانية (Budget Tracking)
-- ===================================================================
CREATE TABLE IF NOT EXISTS budget_tracking (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  project_id UUID REFERENCES projects(id),
  expense_type_id INTEGER REFERENCES expense_types(id),
  period_start DATE NOT NULL,
  period_end DATE NOT NULL,
  
  -- Budget amounts
  planned_amount DECIMAL(15,2) NOT NULL CHECK (planned_amount >= 0),
  actual_amount DECIMAL(15,2) DEFAULT 0 CHECK (actual_amount >= 0),
  remaining_amount DECIMAL(15,2),
  
  -- Status
  status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'completed', 'exceeded')),
  alert_threshold DECIMAL(5,2) DEFAULT 80.00 CHECK (alert_threshold >= 0 AND alert_threshold <= 100),
  
  notes TEXT,
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  CHECK (period_end >= period_start)
);

-- ===================================================================
-- 19. جدول التقارير المخصصة (Custom Reports)
-- ===================================================================
CREATE TABLE IF NOT EXISTS custom_reports (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  query_config JSONB NOT NULL,
  
  -- Sharing and access
  created_by UUID REFERENCES auth.users(id),
  is_public BOOLEAN DEFAULT false,
  shared_with UUID[],
  
  -- Scheduling
  is_scheduled BOOLEAN DEFAULT false,
  schedule_frequency VARCHAR(20) CHECK (schedule_frequency IN ('daily', 'weekly', 'monthly')),
  last_generated TIMESTAMPTZ,
  next_generation TIMESTAMPTZ,
  
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 20. جدول رسائل WhatsApp (WhatsApp Messages)
-- ===================================================================
CREATE TABLE IF NOT EXISTS whatsapp_messages (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  phone_number VARCHAR(20) NOT NULL,
  message_text TEXT NOT NULL,
  message_type VARCHAR(20) DEFAULT 'notification' CHECK (message_type IN ('notification', 'reminder', 'alert')),
  
  -- Related entity
  entity_type VARCHAR(50),
  entity_id UUID,
  
  -- Status
  status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'sent', 'delivered', 'failed')),
  sent_at TIMESTAMPTZ,
  delivered_at TIMESTAMPTZ,
  error_message TEXT,
  
  -- Metadata
  sent_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ DEFAULT now()
);

-- ===================================================================
-- 21. جدول النسخ الاحتياطية (Backups)
-- ===================================================================
CREATE TABLE IF NOT EXISTS backups (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  backup_type VARCHAR(20) NOT NULL CHECK (backup_type IN ('full', 'incremental', 'differential')),
  file_path TEXT,
  file_size BIGINT,
  
  -- Status
  status VARCHAR(20) DEFAULT 'in_progress' CHECK (status IN ('in_progress', 'completed', 'failed')),
  started_at TIMESTAMPTZ DEFAULT now(),
  completed_at TIMESTAMPTZ,
  error_message TEXT,
  
  -- Metadata
  created_by UUID REFERENCES auth.users(id),
  tables_included TEXT[],
  records_count INTEGER,
  compression_ratio DECIMAL(5,2)
);

-- ===================================================================
-- Enable Row-Level Security (RLS) for relevant tables
-- ===================================================================
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE receivables ENABLE ROW LEVEL SECURITY;
ALTER TABLE receivable_payments ENABLE ROW LEVEL SECURITY;
ALTER TABLE completed_works ENABLE ROW LEVEL SECURITY;
ALTER TABLE documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE document_links ENABLE ROW LEVEL SECURITY;
ALTER TABLE activity_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE ledger_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE employees ENABLE ROW LEVEL SECURITY;
ALTER TABLE employee_projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE budget_tracking ENABLE ROW LEVEL SECURITY;
ALTER TABLE custom_reports ENABLE ROW LEVEL SECURITY;

-- ===================================================================
-- Function to update 'updated_at' column
-- ===================================================================
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ language 'plpgsql';

-- ===================================================================
-- Triggers for updating 'updated_at'
-- ===================================================================
CREATE TRIGGER trg_update_profiles BEFORE UPDATE ON profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trg_update_projects BEFORE UPDATE ON projects FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trg_update_transactions BEFORE UPDATE ON transactions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trg_update_receivables BEFORE UPDATE ON receivables FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trg_update_completed_works BEFORE UPDATE ON completed_works FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trg_update_documents BEFORE UPDATE ON documents FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trg_update_employees BEFORE UPDATE ON employees FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trg_update_expense_types BEFORE UPDATE ON expense_types FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trg_update_settings BEFORE UPDATE ON settings FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trg_update_budget_tracking BEFORE UPDATE ON budget_tracking FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trg_update_custom_reports BEFORE UPDATE ON custom_reports FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ===================================================================
-- RLS Policies
-- ===================================================================

-- Profiles policies
CREATE POLICY "Users can view their own profile" ON profiles FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can update their own profile" ON profiles FOR UPDATE USING (auth.uid() = id);

-- Projects policies
CREATE POLICY "Users can view their projects" ON projects FOR SELECT
  USING (EXISTS (SELECT 1 FROM user_roles WHERE user_roles.user_id = auth.uid() AND user_roles.project_id = projects.id));
CREATE POLICY "Project owners can update projects" ON projects FOR UPDATE
  USING (EXISTS (SELECT 1 FROM user_roles WHERE user_roles.user_id = auth.uid() AND user_roles.project_id = projects.id AND user_roles.role = 'owner'));
CREATE POLICY "Users can create projects" ON projects FOR INSERT WITH CHECK (auth.uid() = created_by);

-- User roles policies
CREATE POLICY "Users can view project roles" ON user_roles FOR SELECT
  USING (user_id = auth.uid() OR EXISTS (SELECT 1 FROM user_roles ur WHERE ur.user_id = auth.uid() AND ur.project_id = user_roles.project_id AND ur.role IN ('owner', 'manager')));

-- Transactions policies
CREATE POLICY "Users can view their transactions" ON transactions FOR SELECT USING (auth.uid() = created_by);
CREATE POLICY "Users can insert transactions for their projects" ON transactions FOR INSERT
  WITH CHECK (EXISTS (SELECT 1 FROM user_roles WHERE user_roles.user_id = auth.uid() AND user_roles.project_id = transactions.project_id));
CREATE POLICY "Users can update their transactions" ON transactions FOR UPDATE USING (auth.uid() = created_by);

-- Documents policies
CREATE POLICY "Users can view their documents" ON documents FOR SELECT USING (auth.uid() = created_by);
CREATE POLICY "Users can update their documents" ON documents FOR UPDATE USING (auth.uid() = created_by);
CREATE POLICY "Users can create documents" ON documents FOR INSERT WITH CHECK (auth.uid() = created_by);

-- Activity logs policies
CREATE POLICY "Users can view their logs" ON activity_logs FOR SELECT USING (auth.uid() = user_id);

-- Employees policies
CREATE POLICY "Users can view their employees" ON employees FOR SELECT USING (auth.uid() = created_by);
CREATE POLICY "Users can update their employees" ON employees FOR UPDATE USING (auth.uid() = created_by);
CREATE POLICY "Users can create employees" ON employees FOR INSERT WITH CHECK (auth.uid() = created_by);

-- Receivables policies
CREATE POLICY "Users can view their receivables" ON receivables FOR SELECT USING (auth.uid() = created_by);
CREATE POLICY "Users can update their receivables" ON receivables FOR UPDATE USING (auth.uid() = created_by);
CREATE POLICY "Users can create receivables" ON receivables FOR INSERT WITH CHECK (auth.uid() = created_by);

-- Ledger entries policies
CREATE POLICY "Users can view their ledger entries" ON ledger_entries FOR SELECT USING (auth.uid() = created_by);
CREATE POLICY "Users can create ledger entries" ON ledger_entries FOR INSERT WITH CHECK (auth.uid() = created_by);

-- Notifications policies
CREATE POLICY "Users can view their notifications" ON notifications FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can update their notifications" ON notifications FOR UPDATE USING (auth.uid() = user_id);

-- ===================================================================
-- Indexes for performance optimization
-- ===================================================================

-- Users and profiles indexes
CREATE INDEX idx_profiles_role ON profiles(role);

-- Projects indexes
CREATE INDEX idx_projects_status ON projects(status);
CREATE INDEX idx_projects_created_by ON projects(created_by);
CREATE INDEX idx_projects_dates ON projects(start_date, end_date);
CREATE INDEX idx_projects_priority ON projects(priority);

-- User roles indexes
CREATE INDEX idx_user_roles_user_id ON user_roles(user_id);
CREATE INDEX idx_user_roles_project_id ON user_roles(project_id);

-- Transactions indexes
CREATE INDEX idx_transactions_date ON transactions(date);
CREATE INDEX idx_transactions_type ON transactions(type);
CREATE INDEX idx_transactions_project_id ON transactions(project_id);
CREATE INDEX idx_transactions_created_by ON transactions(created_by);
CREATE INDEX idx_transactions_expense_type_id ON transactions(expense_type_id);
CREATE INDEX idx_transactions_status ON transactions(status);
CREATE INDEX idx_transactions_employee_id ON transactions(employee_id);

-- Employees indexes
CREATE INDEX idx_employees_created_by ON employees(created_by);
CREATE INDEX idx_employees_active ON employees(active);
CREATE INDEX idx_employees_assigned_project_id ON employees(assigned_project_id);

-- Expense types indexes
CREATE INDEX idx_expense_types_active ON expense_types(active);
CREATE INDEX idx_expense_types_parent_id ON expense_types(parent_id);

-- Receivables indexes
CREATE INDEX idx_receivables_due_date ON receivables(due_date);
CREATE INDEX idx_receivables_status ON receivables(status);
CREATE INDEX idx_receivables_created_by ON receivables(created_by);
CREATE INDEX idx_receivables_project_id ON receivables(project_id);

-- Documents indexes
CREATE INDEX idx_documents_created_by ON documents(created_by);
CREATE INDEX idx_documents_project_id ON documents(project_id);
CREATE INDEX idx_documents_category ON documents(category);
CREATE INDEX idx_documents_is_manager_document ON documents(is_manager_document);

-- Activity logs indexes
CREATE INDEX idx_activity_logs_user_id ON activity_logs(user_id);
CREATE INDEX idx_activity_logs_created_at ON activity_logs(created_at);
CREATE INDEX idx_activity_logs_entity ON activity_logs(entity_type, entity_id);

-- Ledger entries indexes
CREATE INDEX idx_ledger_entries_created_by ON ledger_entries(created_by);
CREATE INDEX idx_ledger_entries_transaction_id ON ledger_entries(transaction_id);
CREATE INDEX idx_ledger_entries_entry_date ON ledger_entries(entry_date);

-- Notifications indexes
CREATE INDEX idx_notifications_user_id ON notifications(user_id);
CREATE INDEX idx_notifications_is_read ON notifications(is_read);
CREATE INDEX idx_notifications_created_at ON notifications(created_at);

-- ===================================================================
-- VIEWS للتقارير السريعة
-- ===================================================================

-- View for transaction summaries
CREATE OR REPLACE VIEW transaction_summary AS
SELECT 
    DATE_TRUNC('month', date) as month,
    type,
    COUNT(*) as transaction_count,
    SUM(amount) as total_amount,
    AVG(amount) as avg_amount
FROM transactions 
WHERE status = 'completed'
GROUP BY DATE_TRUNC('month', date), type;

-- View for project financial summary
CREATE OR REPLACE VIEW project_financial_summary AS
SELECT 
    p.id,
    p.name,
    p.budget,
    COALESCE(SUM(CASE WHEN t.type = 'expense' THEN t.amount ELSE 0 END), 0) as total_expenses,
    COALESCE(SUM(CASE WHEN t.type = 'income' THEN t.amount ELSE 0 END), 0) as total_income,
    p.budget - COALESCE(SUM(CASE WHEN t.type = 'expense' THEN t.amount ELSE 0 END), 0) as remaining_budget
FROM projects p
LEFT JOIN transactions t ON p.id = t.project_id AND t.status = 'completed'
GROUP BY p.id, p.name, p.budget;

-- View for overdue payments
CREATE OR REPLACE VIEW overdue_payments AS
SELECT 
    r.*,
    CURRENT_DATE - r.due_date as days_overdue
FROM receivables r
WHERE r.status = 'pending' 
AND r.due_date < CURRENT_DATE;

-- ===================================================================
-- FUNCTIONS للعمليات المعقدة
-- ===================================================================

-- Function to calculate project progress based on budget utilization
CREATE OR REPLACE FUNCTION calculate_project_progress(project_id_param UUID)
RETURNS INTEGER AS $$
DECLARE
    progress_percentage INTEGER;
BEGIN
    SELECT 
        CASE 
            WHEN p.budget > 0 THEN 
                LEAST(100, ROUND((COALESCE(SUM(t.amount), 0) / p.budget) * 100))
            ELSE 0 
        END
    INTO progress_percentage
    FROM projects p
    LEFT JOIN transactions t ON p.id = t.project_id AND t.type = 'expense' AND t.status = 'completed'
    WHERE p.id = project_id_param
    GROUP BY p.id, p.budget;
    
    RETURN COALESCE(progress_percentage, 0);
END;
$$ LANGUAGE plpgsql;

-- Function to get user project access
CREATE OR REPLACE FUNCTION user_has_project_access(user_id_param UUID, project_id_param UUID)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 FROM user_roles 
        WHERE user_id = user_id_param 
        AND project_id = project_id_param
    );
END;
$$ LANGUAGE plpgsql;

-- ===================================================================
-- البيانات الأولية (Initial Data)
-- ===================================================================

-- Insert default expense types
INSERT INTO expense_types (name, description, color, icon) VALUES
('مصروف عام', 'مصاريف عامة غير مصنفة', '#6366F1', 'DollarSign'),
('راتب', 'رواتب الموظفين', '#10B981', 'Users'),
('إيجار', 'إيجار المكاتب والمعدات', '#F59E0B', 'Home'),
('مواصلات', 'مصاريف النقل والمواصلات', '#3B82F6', 'Car'),
('اتصالات', 'فواتير الهاتف والإنترنت', '#8B5CF6', 'Phone'),
('كهرباء', 'فواتير الكهرباء', '#EF4444', 'Zap'),
('مياه', 'فواتير المياه', '#06B6D4', 'Droplets'),
('مكتبية', 'مستلزمات مكتبية', '#84CC16', 'FileText'),
('صيانة', 'أعمال الصيانة والإصلاح', '#F97316', 'Wrench'),
('تسويق', 'مصاريف التسويق والإعلان', '#EC4899', 'Megaphone'),
('ضرائب', 'الضرائب والرسوم الحكومية', '#6B7280', 'Receipt'),
('تأمين', 'بوالص التأمين', '#14B8A6', 'Shield')
ON CONFLICT (name) DO NOTHING;

-- Insert default settings
INSERT INTO settings (key, value, description, category, type, is_public) VALUES
('app_name', 'نظام المحاسبة العربي', 'اسم التطبيق', 'general', 'string', true),
('currency', 'USD', 'العملة الافتراضية', 'general', 'string', true),
('timezone', 'Asia/Baghdad', 'المنطقة الزمنية', 'general', 'string', false),
('language', 'ar', 'اللغة الافتراضية', 'general', 'string', true),
('decimal_places', '2', 'عدد الخانات العشرية', 'general', 'number', true),
('backup_frequency', 'daily', 'تكرار النسخ الاحتياطي', 'backup', 'string', false),
('max_file_size', '10485760', 'حد أقصى لحجم الملف (بايت)', 'files', 'number', false),
('allowed_file_types', 'pdf,jpg,jpeg,png,doc,docx,xls,xlsx', 'أنواع الملفات المسموحة', 'files', 'string', false),
('notification_email', 'admin@example.com', 'البريد الإلكتروني للإشعارات', 'notifications', 'string', false),
('whatsapp_enabled', 'false', 'تفعيل رسائل واتساب', 'integrations', 'boolean', false)
ON CONFLICT (key) DO NOTHING;

-- ===================================================================
-- COMMENTS لتوثيق الجداول
-- ===================================================================

COMMENT ON TABLE profiles IS 'جدول الملفات الشخصية للمستخدمين - يحتوي على معلومات المستخدمين وصلاحياتهم';
COMMENT ON TABLE projects IS 'جدول المشاريع - يحتوي على معلومات المشاريع وتفاصيلها';
COMMENT ON TABLE transactions IS 'جدول المعاملات المالية - يحتوي على جميع العمليات المالية';
COMMENT ON TABLE receivables IS 'جدول المقبوضات - لتتبع المدفوعات المستحقة';
COMMENT ON TABLE completed_works IS 'جدول الأعمال المكتملة - لتتبع الأعمال المنجزة';
COMMENT ON TABLE documents IS 'جدول الوثائق - لإدارة الملفات والمستندات';
COMMENT ON TABLE activity_logs IS 'جدول سجل الأنشطة - لتتبع جميع العمليات في النظام';
COMMENT ON TABLE settings IS 'جدول الإعدادات - لحفظ إعدادات النظام';
COMMENT ON TABLE employees IS 'جدول الموظفين - معلومات الموظفين والعاملين';
COMMENT ON TABLE expense_types IS 'جدول أنواع المصاريف - تصنيف المصروفات';
COMMENT ON TABLE ledger_entries IS 'جدول القيود المحاسبية - القيود المحاسبية المزدوجة';
COMMENT ON TABLE notifications IS 'جدول الإشعارات - إشعارات النظام للمستخدمين';
COMMENT ON TABLE budget_tracking IS 'جدول تتبع الميزانية - مراقبة ميزانيات المشاريع';
COMMENT ON TABLE custom_reports IS 'جدول التقارير المخصصة - تقارير قابلة للتخصيص';
COMMENT ON TABLE whatsapp_messages IS 'جدول رسائل واتساب - تكامل مع واتساب للإشعارات';
COMMENT ON TABLE backups IS 'جدول النسخ الاحتياطية - معلومات النسخ الاحتياطية';

-- ===================================================================
-- نهاية مخطط قاعدة البيانات الشامل
-- ===================================================================
